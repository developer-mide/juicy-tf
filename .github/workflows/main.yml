name: juicy-tf
on:
  workflow_call:
    inputs:
      skip_validate_pr_title:
        description: 'Skip validating the PR title'
        required: false
        type: boolean
        default: false
      skip_variable_type_declaration:
        description: 'Skip ensuring variable types are declared'
        required: false
        type: boolean
        default: false
      pr_title_pattern:
        description: 'Pattern to match the PR title'
        required: false
        type: string
        default: 'JIRA-[0-9]{1,5}'
      main_tf_working_dir:
        description: 'Directory to start the search from'
        required: false
        type: string
        default: 'infra/'

jobs:
  validate_pr_title:
    name: Validate PR Title
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          if [[ ${{ inputs.skip_validate_pr_title }} == false ]]; then
            if [[ "${{ github.event.pull_request.title }}" =~ ${{ inputs.pr_title_pattern }} ]]; then
              echo "PR title matches pattern"
            else
              echo "ERROR: PR title does not match pattern"
              exit 1
            fi
          else
            echo "Skipping PR title validation"
          fi

  check_secrets:
    name: Check Secrets
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          search_dir="${{ github.workspace }}/${{ inputs.main_tf_working_dir }}"
          tf_patterns=("password=" "secret=" "key=" "cert=" "token=" "credentials=")

          search_tf_file() {
            local file="$1"
            for pattern in "${tf_patterns[@]}"; do
              if grep -qi "$pattern" "$file"; then
                echo "::warning file=$file::Possible secret found in $file"
              fi
            done
          }

          check_sensitive_files() {
            local file="$1"
            if [[ "$file" =~ \.(env|tfstate|tfvars)$ ]]; then
              echo "Sensitive file found: $file"
              exit 1
            fi
          }

          find "$search_dir" -type f \( -name "*.tf" -o -name "*.env" -o -name "*.tfstate" -o -name "*.tfvars" \) -exec bash -c '
            if [[ "$0" =~ \.tf$ ]]; then
              search_tf_file "$0"
            else
              check_sensitive_files "$0"
            fi
          ' {} \;

  check_terraform_fmt:
    name: Check Terraform Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          if terraform fmt -check -recursive; then
            echo "Terraform files are formatted correctly"
          else
            terraform fmt -recursive -diff -check
            echo "ERROR: Terraform files are not formatted correctly"
            exit 1
          fi

  validate_terraform:
    name: Validate Terraform
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      - run: |
          cd "${{ github.workspace }}/${{ inputs.main_tf_working_dir }}"
          terraform init
          terraform validate

  find_lock_file:
    name: Find Lock File
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          cd "${{ github.workspace }}/${{ inputs.main_tf_working_dir }}"
          if find . -name "*.lock.hcl" | read; then
            echo "Lock file found"
          else
            echo "No lock file found"
            exit 1
          fi

  variable_type_declaration:
    name: Variable Type Declaration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          if [[ ${{ inputs.skip_variable_type_declaration }} == true ]]; then
            echo "Skipping variable type declaration check"
          else
            cd "${{ github.workspace }}/${{ inputs.main_tf_working_dir }}"
            files_without_type=()

            for file in *.tf; do
              if ! grep -q 'type = string' "$file"; then
                files_without_type+=("$file")
              fi
            done

            if [ ${#files_without_type[@]} -eq 0 ]; then
              echo "All .tf files have the type declaration."
            else
              echo "The following .tf files do not have the type declaration:"
              printf '%s\n' "${files_without_type[@]}"
            fi
          fi

  ensure_remote_backend:
    name: Check Remote Backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      - run: |
          if grep -q "backend \"remote\"" main.tf; then
            echo "Remote backend is configured."
          else
            echo "Error: Remote backend is not configured."
            exit 1
          fi
